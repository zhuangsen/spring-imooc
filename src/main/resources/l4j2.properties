#用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出
status=debug
dest=err
name=PropertiesConfig
#日志文件名称
property.filename=logs/rollingtest.log
#日志文件内容的格式，说明：
#%n-换行
#%m-日志内容
#%p-日志级别(FATAL,ERROR,WARN...)
#%F-java源文件名
#%t 输出产生该日志事件的线程名
#%d 输出日志时间点的日期或时间
#%L-java源码行数
#%C-java类名
#%M-java方法名
#%l-输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数
#property.layoutPattern=%-d{yyyy-MM-dd HH:mm:ss,SSS} %p %c %m%n
property.layoutPattern=%d %highlight{%-5level}{ERROR=Bright RED, WARN=Bright Yellow, INFO=Bright Green, DEBUG=Bright Cyan, TRACE=Bright White} %style{[%t]}{bright,magenta} %style{%c{1.}.%M(%L)}{cyan}:%msg%n
# 级别过滤（过滤日志记录）
filter.threshold.type=ThresholdFilter
# 只记录debug级别以上的日志，大小写无关：(ALL<)TRACE<DEBUG<INFO<WARN<ERROR<FATAL(<OFF)
filter.threshold.level=debug
# 控制台类型的日志输出源
appender.console.type=Console
# 输出源的名称
appender.console.name=STDOUT
#输出类型
appender.console.target=SYSTEM_OUT
# 输出布局类型
appender.console.layout.type=PatternLayout
# 输出模板
appender.console.layout.pattern=${layoutPattern}
# 文件日志输出源
appender.rolling.type=RollingFile
#输入源名称
appender.rolling.name=RollingFile
#日志文件名
appender.rolling.fileName=${filename}
#指定当发生文件滚动时，文件重命名规则
appender.rolling.filePattern=logs/rollingtest-%d{yyyyMMdd}-%i.log
# 滚动记录输出源布局类型
appender.rolling.layout.type=PatternLayout
# 输出模板
appender.rolling.layout.pattern=${layoutPattern}
# 指定记录文件的保存策略，该策略主要是完成周期性的日志文件保存工作
appender.rolling.policies.type=Policies
# 基于时间的触发策略（TriggeringPolicy）
appender.rolling.policies.time.type=TimeBasedTriggeringPolicy
# 当前记录周期为每2秒生成一个文件，如果filePattern中配置的文件重命名规则是test1-%d{yyyy-MM-dd HH-mm}-%i，
#最小的时间粒度是mm，即分钟，TimeBasedTriggeringPolicy指定的size是1，结合起来就是每2分钟生成一个新文件。
#如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每2个小时生成一个文件。
appender.rolling.policies.time.interval=2
# 是否对保存时间进行限制。若modulate=true，则保存时间将以0点为边界进行偏移计算。
#比如，modulate=true，interval=4hours，
#那么假设上次保存日志的时间为03:00，则下次保存日志的时间为04:00，之后的保存时间依次为08:00，12:00，16:00
appender.rolling.policies.time.modulate=true
# 基于日志文件大小的触发策略
appender.rolling.policies.size.type=SizeBasedTriggeringPolicy
# 当日志文件大小大于size指定的值时，触发滚动
appender.rolling.policies.size.size=100MB
# 文件保存的覆盖策略
appender.rolling.strategy.type=DefaultRolloverStrategy
# 生成分割（保存）文件的个数，默认为5(-1,-2,-3,-4,-5)
appender.rolling.strategy.max=5
# 记录器名称
logger.rolling.name=com.imooc
# 设置日志级别
logger.rolling.level=debug
# 是否向上级logger传递信息
logger.rolling.additivity=true
# 关联名称为RollingFile的输出源（appender）
logger.rolling.appenderRef.rolling.ref=RollingFile
#设置SpringFramework框架的日志级别，一般业务上不需要其它使用了log4j的框架输出日志
logger.SpringFramework.name=org.springframework
logger.SpringFramework.level=DEBUG
#当有其它框架的也使用了log4j时，会输出相应日志，以下方式为屏蔽其它框架的日志信息（设置日志级别）
#logger.Http.name = org.apache.http
#logger.Http.level = TRACE
# 根记录器，所有记录器的父辈
rootLogger.level=debug
# 关联名称为STDOUT的输出源（appender）
rootLogger.appenderRef.stdout.ref=STDOUT